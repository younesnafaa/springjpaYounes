# Le port sur lequel est lancee l'application web (8080 par defaut)
server.port=8989

# L'adresse du serveur de base de donnees : SGBD H2 en memoire vive
spring.datasource.url=jdbc:h2:mem:testdb

# Comment JPA agit sur le schema de la BD relationnelle
# les valeurs possibles sont : create, create-drop, update, validate, none
# create : recree le schema a chaque lancement de l'application
# create-drop : recree le schema a chaque lancement de l'application et le supprime a l'arret
# update : met a jour le schema en fonction des entites JPA
# validate : valide le schema par rapport aux entites JPA
# none : ne fait rien
spring.jpa.hibernate.ddl-auto=create-drop
# A quel moment on charge les donnees initiales dans la BD
# On initialise la BD (data.sql) APRES la creation du schema relationnel
spring.jpa.defer-datasource-initialization=true
# Le 'dialecte' SQL utilise par JPA
# Permet de generer du SQL optimise pour le SGBD utilise
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


# Configuration des logs
server.error.include-stacktrace=never
# cf. https://www.baeldung.com/sql-logging-spring-boot
# Configuration des logs SQL JPA
logging.level.org.springframework=INFO
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
#logging.level.org.hibernate.SQL=WARN
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.monprojet=INFO
logging.pattern.console=%clr(%-5p)  %cyan(%logger{15}) - %msg %n
# Spring actuator
management.endpoints.web.exposure.include=*
# Set the base path for REST API
spring.data.rest.base-path=api